const router = require('express').Router();
const { getCredentials } = require('../../controllers/credentials');
const lodash = require('lodash');
const {
  shopifyCredentials,
  shopifyInitialize,
  BulkOperationBuilder,
  getBulkOperationUrl,
  jsonTo2D,
  MAX_VAL,
} = require('../../utils/shopify-helper');
const {
  dimensions,
  metrics,
  fields,

  schema,
} = require('./data/shopifyFormData');
const { join } = require('lodash');
{
  const moment = require('moment');
  const { dateRangeToDate } = require('../../utils/ds');
  const { Parser } = require('json2csv');
  const { jsonToGraphQLQuery } = require('json-to-graphql-query');
  const { object, values } = require('underscore');
  const { resolve } = require('path');
  const { default: Axios } = require('axios');
  const alasql = require('alasql');
  const { Console } = require('console');

  const { vault } = require('googleapis/build/src/apis/vault');

  class Shopify {
    constructor(credential, metrics, dimensions) {
      this.initDatabase();
      this.metrics = metrics;
      this.dimensions = dimensions;
      //this.shopifyInitialize(credential);
    }

    shopifyInitialize(credential) {
      this.shopify = new Shopify({
        shopName: credential.subdomain,
        accessToken: credential.access_token,
      });
    }

    initDatabase() {
      this.db = new alasql.Database();
      this.db.exec(schema);
    }
    findBelongTo(id) {
     if (id.includes('Order')) return 'orders';
      if (id.includes('LineItem')) return 'lineitems';
      //console.log(id.includes('LineItem'))
      var res=id.split("/");
      var ans=res[3];
     if(ans=='Product') return 'products';
     // if (id.includes('Product')) return 'products';
      if (ans=='ProductVariant') return 'variants'
     
   
      return '';
    }
   
    insertRecord(tempJson, columns, values) {
     console.log(tempJson);
      //console.log(columns);
      //console.log("____________")
      //console.log(values);
      let tableName = this.findBelongTo(tempJson.id);
     //  console.log(tableName);
    console.log('INSERT INTO ' + tableName + ' (' + columns + ') (' + values + ') ',
      tempJson);
      this.db.exec(
        'INSERT INTO ' + tableName + ' (' + columns + ') (' + values + ') ',
        tempJson
      );
    }
join(fields){
  console.log(fields);
  //console.log('SELECT ' + '*' + 'FROM' + 'lineitems' + 'LEFT JOIN' + 'orders' + 'ON' + 'lineitems.__parentId' + '=' + 'orders.id')
  let q = `SELECT * FROM lineitems LEFT JOIN orders ON lineitems.__parentId =orders.id`
  console.log(q);
   return this.db.exec(`SELECT * FROM lineitems LEFT JOIN orders ON lineitems.__parentId =orders.id` );

   
  
}
    query(table, fields) {
      console.log('SELECT ' + fields.toString() + ' from ' + table);
      return this.db.exec('SELECT ' + fields.toString() + ' from ' + table);
             
    }
 
  }

  


  router.post('/testConnection', async (req, res) => {
    console.log('shopify testConnection');
    console.log(req.body);

    try {
      const credential = await shopifyCredentials(req.body.authId);

      console.log(credential);
      if (credential) {
        let shopify = shopifyInitialize(credential);
        let shop = await shopify.shop.get();
        if (shop.id) {
          res.json({
            status: 'success',
            data: shop,
            userName: shop.email,
          });
        } else {
          res.json({
            status: 'error',
            errorMessage: 'Invalid Credentials',
          });
        }
      } else {
        res.json({
          status: 'error',
          errorMessage: 'Invalid Credentials',
        });
      }
    } catch (error) {
      console.log(error.message);
      res.json({
        status: 'error',
        errorMessage: error.message,
      });
    }
  });

  router.post('/getInitialFormValues', async (req, res) => {
    try {
      console.log(req.body);
      const data = req.body;
      const credential = await shopifyCredentials(data.conn.authId);
      // const accessToken = await linkedinCredentials('shopify-1')

      console.log(credential);
      if (credential) {
        let shopify = shopifyInitialize(credential);
        let shop = await shopify.shop.get();
        console.log(shop);
        if (shop.id) {
          res.json({
            accounts: shop,
            metrics: metrics,
            dimensions: dimensions,
          });
        } else {
          res.json({
            status: 'error',
            errorMessage: 'Invalid Credentials',
          });
        }
      } else {
        res.json({
          status: 'error',
          errorMessage: 'Invalid Credentials',
        });
      }
    } catch (error) {
      console.log('error occured');
      console.log('ERROR shopify');
      console.log(error);
      let errorCode = 400;
      let errorMessage = 'Something went wrong. Please try again.';
      if (typeof error.message === 'undefined') {
        errorMessage = error.response.data.error.message;
      } else {
        errorMessage = error.message;
      }
      res.status(errorCode).send(errorMessage);
    }
  });

  router.post('/runQuery', async (req, res) => {
    console.log('req.body getttttttt');
    console.log(req.body.queryObj);

    try {
      let data = req.body;
      let query = data.queryObj;

      let cret = await getCredentials(data.conn.authId);
      let credential = JSON.parse(cret?.credentials);

      let shopify = shopifyInitialize(credential);
      let user_shopify = new Shopify(
        credential,
        query.metrics,
        query.dimensions
      );
      let bulk = await shopify.graphql(BulkOperationBuilder());

      const queryId = bulk.bulkOperationRunQuery.bulkOperation.id;
      const url = await getBulkOperationUrl(shopify, queryId);
      let result = await Axios.get(url);

      console.log(result.data);

      let ProcessResultData = result.data
        .split('\n')
        .filter((line) => line)
        .map((line) => line.trim())
        .map((line) => {
          let json = JSON.parse(line);
          let columns = 'id';
          let columnsValues = ':id';
          let tempJson = { id: json.id };
          let tempJson1={id: json.id};
          if (json.createdAt) {
            columns += ' ,createdAt';
            columnsValues += ' ,:createdAt';
            tempJson.createdAt = json.createdAt;
            tempJson1.createdAt = json.createdAt;
          }
          if (json.__parentId) {
            columns += ' ,__parentId';
            columnsValues += ' ,:__parentId';
            tempJson.__parentId = json.__parentId;
            tempJson1.__parentId = json.__parentId;
          }
         
          //Dimensions
          let obj={};
          console.log(tempJson)
          query.dimensions.forEach((dimension) => {
           
            let providerParam = fields[dimension].providerParam;
            let providerParams = fields[dimension].providerParams;
           
            
            
            columns += ' ,' + providerParam;
            columnsValues += ' ,:' + providerParam;
            let providerPath = fields[dimension].providerPath;
         // console.log(json[providerParams]);
            if(providerPath && json[providerParams] &&
              !tempJson[providerPath]){
           var finals=lodash.get(json[providerParams],providerPath);
          
           json[providerParam]=finals
            }
            tempJson[providerParam]=json[providerParam];
            console.log(tempJson);
           
          });
         
          //Metric
          query.metrics.forEach((metric) => {
            let providerParam = fields[metric].providerParam;
            columns += ' ,' + providerParam;
            columnsValues += ' ,:' + providerParam;
            let providerPath = fields[metric].providerPath;
            if (
              providerPath &&
              json[providerParam] &&
              !tempJson[providerParam]
            ) {
              json[providerParam] = providerPath
                .split('.')
                .reduce((o, i) => o[i], json[providerParam]);
            }
            tempJson[providerParam] = json[providerParam];
          });
          //console.log(tempJson.id);
          console.log("popipopipopipopipopipopi")
          console.log(tempJson);
          const ans = user_shopify.insertRecord(
            tempJson,
            columns,
            columnsValues
          );
       
         

          return json;
                  });
          //console.log(ProcessResultData);

          //Grouping
      let grouping = {};
     let orderedColumns=[];
      query.dimensions.forEach((dimension) => {
        let label=fields[dimension].label;
        orderedColumns.push(label);
        if (!(fields[dimension].category in grouping)) {
          grouping[fields[dimension].category] = {};
        }

        let providerParam = fields[dimension].providerParam;
        let providerPath=fields[dimension].providerPath;
        let column = '';
        if (fields[dimension].providerParamAggregation) {
          column =
            fields[dimension].providerParamAggregation +
            '(' +
            providerParam +
            ') AS ' +
            dimension;
        } else {
          column =  providerParam + ' AS ' + '['+ label+']';
        }
        if (grouping[fields[dimension].category].columns) {
          grouping[fields[dimension].category].columns.push(column);
        } else {
          grouping[fields[dimension].category].columns = [column];
        }
      });

      query.metrics.forEach((metric) => {
       let label=fields[metric].label;
       orderedColumns.push(label);
        if (!(fields[metric].category in grouping)) {
          grouping[fields[metric].category] = {};
        }
        let providerParam = fields[metric].providerParam;
        let column = '';
        if (fields[metric].providerParamAggregation) {
          column =
            fields[metric].providerParamAggregation +
            '(' +
            providerParam +
            ') AS ' +
            metric;
        } else {
          column = providerParam + ' AS ' + '['+ label+']';
        }

        if (grouping[fields[metric].category].columns) {
          grouping[fields[metric].category].columns.push(column);
        } else {
          grouping[fields[metric].category].columns = [column];
        }
      });

    

     let result1 = [];
   
      let arr = [];
     let arr1=[];
      for (const param in grouping) {
        var i=0;
       arr1.push(...grouping[param].columns);
       //  var ans=arr.push(data);
     //   result1 = { ...result1, ...data[i]};
     //  i++;
      } 
      var joindata= user_shopify.join(arr1.toString());
      let finalData=alasql(`SELECT ${arr1.toString()} FROM ?`,[joindata]);
      console.log(finalData);
      if(arr.length==1){
      var pok=arr[0];
    }


    if(arr.length==2){
     // var firstData=arr[0].concat(arr[1]);
      var pok=[];
     var n1=arr[0].length;
     var n2=arr[1].length;
     if(n1>n2){
       var n3=n1;
     }
     else{
       n3=n2;
     }
    // console.log(n3);
     //console.log(n1,n2);
     for(let index = 0; index <n3; index++) {
     let obj = {
      ...arr[0][index],
      ...arr[1][index]
    }
    pok.push(obj)
   }
  // console.log(pok);  
    }


    if(arr.length==3){
      var pok=[];
      for(let index=0;index<arr[0].length;index++){
        let obj={
          ...arr[0][index],
          ...arr[1][index],
          ...arr[2][index]
        }
        pok.push(obj);
      }
      //console.log(pok);
    }


     if(arr.length==4){
      var pok=[];
      for(let index=0;index<arr[0].length;index++){
        let obj={
          ...arr[0][index],
          ...arr[1][index],
          ...arr[2][index],
          ...arr[3][index]
        }
        pok.push(obj);
      }
      //console.log(pok);
     }
    
const response=jsonTo2D(finalData,orderedColumns,false);
//console.log(response);
     
   // console.log(pok)
 /*   let headers1 = [
      Object.keys(result1).map((key) => {
        //console.log(key);
        return fields[key].label;
      }),
    ];

    const json2csvParser1 = new Parser();
    let csv1 = json2csvParser1.parse(pok);
    csv1 = csv1.split('\n');
    csv1.splice(0, 1);
    csv1 = csv1.map((e, index) => {
      let s = e.split(/,(?=(?:(?:[^"]*"){2})*[^"]*$)/);
      s = s.map((ae) => {
        return ae.replace(/"/g, '');
      });
      return s;
    });
    console.log("ddddddddddddddd");
    
 // console.log(csv1);
  //console.log(headers1);
*/
      res.json(response);
  
    } catch (error) {
      console.log(error);
      let errorCode = 400;
      let errorMessage = 'Something went wrong. Please try again.';
      if (typeof error.message === 'undefined') {
        errorMessage = error.response.data.error.message;
      } else {
        errorMessage = error.message;
      }
      res.status(errorCode).send(errorMessage);
    }
  });
}
module.exports = router;

